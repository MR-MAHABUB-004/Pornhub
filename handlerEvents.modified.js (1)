
const fs = require("fs-extra");
const nullAndUndefined = [undefined, null];

function getType(obj) {
  return Object.prototype.toString.call(obj).slice(8, -1);
}

function getRole(threadData, senderID) {
  const adminBot = global.GoatBot.config.adminBot || [];
  if (!senderID) return 0;
  const adminBox = threadData ? threadData.adminIDs || [] : [];
  return adminBot.includes(senderID) ? 2 : adminBox.includes(senderID) ? 1 : 0;
}

function replaceShortcutInLang(text, prefix, commandName) {
  return text.replace(/{(?:p|prefix)}/g, prefix)
             .replace(/{(?:n|name)}/g, commandName)
             .replace(/{pn}/g, `${prefix}${commandName}`);
}

function createGetText2(langCode, pathCustomLang, prefix, command) {
  const commandType = command.config.countDown ? "command" : "command event";
  const commandName = command.config.name;
  let customLang = {};
  let getText2 = () => {};
  if (fs.existsSync(pathCustomLang)) {
    customLang = require(pathCustomLang)[commandName]?.text || {};
  }
  if (command.langs || customLang || {}) {
    getText2 = function (key, ...args) {
      let lang = command.langs?.[langCode]?.[key] || customLang[key] || "";
      lang = replaceShortcutInLang(lang, prefix, commandName);
      for (let i = args.length - 1; i >= 0; i--) {
        lang = lang.replace(new RegExp(`%${i + 1}`, "g"), args[i]);
      }
      return lang || `❌ Can't find text on language "${langCode}" for ${commandType} "${commandName}" with key "${key}"`;
    };
  }
  return getText2;
}

module.exports = function (api, threadModel, userModel, dashBoardModel, globalModel, usersData, threadsData, dashBoardData, globalData) {
  return async function (event, message) {
    const { utils, GoatBot, client } = global;
    const { getPrefix, log, getTime } = utils;
    const { config, commands } = GoatBot;
    const { envGlobal, envCommands, envEvents } = config.configCommands;
    const { threadID, body, senderID } = event;

    const prefix = getPrefix(threadID);
    const isOnlyPrefixUsed = body?.trim() === prefix;

    if (isOnlyPrefixUsed && commands.has(prefix)) {
      const command = commands.get(prefix);
      try {
        await command.onStart({
          api,
          event,
          message,
          args: [],
          commandName: prefix,
          getLang: () => (key) => key,
          prefix,
          envGlobal,
          envCommands,
          envEvents,
          role: 0,
          threadsData,
          usersData,
          globalData,
          dashBoardData,
          userModel,
          threadModel,
          globalModel,
          dashBoardModel
        });
        log.info("CALL PREFIX COMMAND", `Successfully ran prefix-only command: "${prefix}"`);
      } catch (err) {
        log.err("CALL PREFIX COMMAND", `Error while running prefix-only command "${prefix}"`, err);
        await message.reply(`An error occurred while running prefix-only command.`);
      }
    }
  };
};
